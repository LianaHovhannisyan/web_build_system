// Top-level build file.
import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os


// Gradle task to install all Node.js dependencies defined in package.json.
task npm(type: Exec) {
   group = "Build"
   description = "Installs all Node.js dependencies defined in package.json"
   commandLine = ["npm", "install"]
   inputs.file "package.json"
   outputs.dir "node_modules"
}

// Gradle GruntTask class
class GruntTask extends Exec {
   private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? "grunt.cmd" : "grunt"
   def gruntArgs = ""

   public GruntTask() {
       super()
       this.setExecutable(gruntExecutable)
   }

   public void setGruntArgs(String gruntArgs) {
       this.args = "$gruntArgs".trim().split(" ") as List
   }
}

// Gradle task to build web applications using grunt
task buildWebApp(type: GruntTask) {
    group = "Build"
    description = "Build web app"
    gruntArgs = "build"
}

// Gradle task to run web applications using grunt
task runWebApp(type: GruntTask) {
    group = "Run"
    description = "Build web app"
    gruntArgs = "serve"
}

// Gradle task to test web applications using grunt
task testwebApp(type: GruntTask) {
    group = "Verification"
    description = "Runs the Grunt test cmd."
    gruntArgs = "test"
}

// Gradle task to clean previous build
//task clean(type: GruntTask) {
//    group = "Clean"
//    description = "Clean previous builds."
//    gruntArgs = "clean"
//}


